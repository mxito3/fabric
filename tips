1.MSP
	基本概念：
		即成员服务提供商
		MSP是一个提供抽象化成员操作框架的组件，负责证书的颁发与校验，以及用户认证背后的所有密码学机制和协议的抽象。
	组成：
		根CA证书列表,中间CA证书列表,TLS根证书列表，TLS中间证书列表，管理员证书列表，撤销证书列表，私钥库
	注意：
		MSP证书列表是唯一的
2.组织
	拥有相同可信根证书的成员的集合。
3.成员与节点之间的关系
	成员提供节点服务，每个组织由多个成员组成。    
4.锚节点
	不同组织之间联系的纽带。
5.通道
	在通道中进行数据交互而不必担心被其他人看到

6.配置文件及其含义
	ctypt-config.yaml	
		定义channel的网络拓扑结构，用来生成这种证书。
	config-tx.yaml
		该文件包含网络的定义，并给出了网络组件的每个网络实体的加密材料的存储位置。

7.chainCode
	nodejs:
		chain code必须实现ChaincodeInterface中的方法，及init方法和invoke方法，这两个方法都提供了一个stub对象，可以
		提供请求有关的信息，该对象由fabric-shim实现，提供一个节点和链码之间的中间层。
		
		init方法在初始化链码以及升级的时候被调用，invoke方法在交易或者query的时候被调用。	

8.chaincode开发
	配置文件相关：
		working_dir指的是进入容器时的默认位置
		volumes是本地环境到容器的映射，测试自己的chaincode的时候只需要将chaincode的目录映射过去其他的不用改。
		command指的是容器启动后执行的命令（注意可能会依赖映射过去的文件）
	命令：
		cd chaincode-docker-devmode
		启动网络：
			docker-compose -f docker-compose-simple.yaml up
		运行chaincode:
			docker exec -it chaincode bash
			CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=mycc:0 ./chaincodeName   (chaincodeName是编译过的链码)
		初始化链码，调用链码
		docker exec -it cli bash
		peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0
		peer chaincode instantiate -n mycc -v 0 -c '{"Args":["a","10"]}' -C myc
		peer chaincode invoke -n mycc -c '{"Args":["set", "a", "20"]}' -C myc
		peer chaincode query -n mycc -c '{"Args":["query","a"]}' -C myc



